Topology creator is an abstraction level of cummulus network topology_converter
This is a series of bash scripts that wraps cummulus python file so it can provide
a topology for datacenters.

-o Operation system:
  This option provides a way to select which vagrant box you would like to use in your topology
  Default value is hashicorp/bionic64

-v Version
  This option provides a way to select which OS version vagrant box you would like to use in your topology
  Default value is 1.0.282 for hashicorp/bionic64

-t Tor number:
  This option provides a way to select the number of tor machines (leaf machines) that will be created
  Each tor is a TOP OF RACK linux machine that can be abstract as an switch hardware
  Each tor will have a number of servers wired to it via its swp ports
  If --spines is added to the list of arguments, port swp50 will be linked to a router machines named spine
  in other case, port swp50 will be linked to swp49 of the neighbor tor
  Default value is 1

-s Server number:
  This option provides a way to select the number of server machines that will be created
  Each server is a linux machine
  Each server will have only one tor wired to it via its eth0
  Default value is 1

-m Memory
  Ram allocated to each machine
  Default value is 500mb

-d Delete
  Delete topology after creation
  This option was created to run debug tests

-st Standart
  When -st is passed as an argument, converter.sh will read a .txt file at
  ./User_Script/standartRules.txt and parse its value
  Each column will be the value of an argument of converter.sh
  This option exist so the user does not need to run converter.sh with arguments every single time

-c Command
  This option provides a way to pass a number of commands to each machine after initialization
  After vagrant create every machine in the topology, converter.sh will run the bash script at
  ./User_Script/instructions.sh

--brige
  This option will run an array of bash commands in order to set a bridge between each server machine
  This way, the tor machine will run as it is a switch hardware, redirecting packets around its ports
  When this option is set, the --ip option will run in its normal mode

--vlan
  This option runs an array of bash commands in order to set swp50/swp49 as a vlan port, after that
  it will bridge half of the server connected to the tor to each vlan port, in order to logically divide topology
  This way, the tor machine will run as it is a switch hardware, redirecting packets around its ports
  When this option is set, the --ip option will run in its normal mode

--spine
  This option will adds third layer of machines, creating one new vm, called spine, that connects to every single
  tor via its swp ports. This new machine will run as it is a router, and should be configured in order to divide
  each half of its swp as a different network.
  When running this command, each tor and server created using the option -t -s will be duplicated (one for each half)
  The tor machines will run as switchs, and each vm will contain the prefix L/R in order to identify its half
  When this option is set, the --ip option will not run in its normal mode

--ip
  This option provides an array of ips to each machine, these might vary according to the argument given as input and
  its type of operation. For more options type --help ip
